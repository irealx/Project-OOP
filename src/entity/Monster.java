package entity;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.util.*;
import system.Config;
import system.Level;
import system.Utils;

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏Å‡∏° ‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏° ‡πÅ‡∏•‡∏∞‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
 */
public class Monster extends Sprite {

    // ‡πÇ‡∏´‡∏•‡∏î sprite sheet ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß
    private static final MonsterAnimator animator = new MonsterAnimator();

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ AttackBehavior ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å animator ‡πÑ‡∏î‡πâ
    public static MonsterAnimator gMonsterAnimator() { return animator; }

    // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ
    public enum AttackType { STUN, WRAP, SHOOT }

    // ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ö‡∏ö (Strategy Pattern)
    public interface AttackBehavior {
        void attack(Monster self, Player player, Level level);   // ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏´‡∏•‡∏±‡∏Å
        default void render(Graphics2D g, Monster self) {}       // ‡∏ß‡∏≤‡∏î‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß (optional)
        default void reset(Monster self) {}                      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡πÉ‡∏´‡∏°‡πà
        default void afterUpdate(Monster self) {}                // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á update ‡πÄ‡∏™‡∏£‡πá‡∏à (optional)
    }

    // mapping ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ -> ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏£‡∏¥‡∏á
    private static final Map<AttackType, AttackBehavior> BEHAVIOURS = new EnumMap<>(AttackType.class);
    static {
        BEHAVIOURS.put(AttackType.STUN, new StunAttack());
        BEHAVIOURS.put(AttackType.WRAP, new WrapAttack());
        BEHAVIOURS.put(AttackType.SHOOT, new ShootAttack());
    }

    // -------------------- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏´‡∏•‡∏±‡∏Å --------------------
    private final AttackType type;          // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå
    private AttackBehavior attackBehavior;  // ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå
    private final boolean[] activeLevels;   // ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏î‡πà‡∏≤‡∏ô‡∏°‡∏≠‡∏ô‡∏à‡∏∞‡πÇ‡∏ú‡∏•‡πà‡πÑ‡∏´‡∏°
    private boolean active;                 // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

    // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
    private String currentAnim = "idle";    // ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    private int frameIndex = 0;             // ‡πÄ‡∏ü‡∏£‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    private int frameTimer = 0;             // ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ü‡∏£‡∏°
    private boolean moving = false;         // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
    private boolean facingLeft = false;     // ‡∏à‡∏≥‡∏ß‡πà‡∏≤‡∏°‡∏≠‡∏ô‡∏´‡∏±‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÑ‡∏´‡∏°
    private boolean animationLocked = false;// ‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏≠‡∏á (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡πà‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞)

    // ----------------------------------------------------

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà
    public Monster(AttackType type) {
        super(Config.MONSTER_SIZE, Config.MONSTER_SPEED[type.ordinal()]);
        this.type = type;
        this.activeLevels = new boolean[Config.TOTAL_LEVELS];
        setAttackBehavior(type);
        setFrame(null, Config.MONSTER_COLOR);
    }

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå
    private void setAttackBehavior(AttackType type) {
        attackBehavior = BEHAVIOURS.get(type);
    }

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    public void setActiveLevels(int... levels) {
        for (int level : levels) {
            if (Utils.withinBounds(level, 0, activeLevels.length - 1)) {
                activeLevels[level] = true;
            }
        }
    }

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡πÉ‡∏´‡∏°‡πà
    public void prepareForLevel(int index, Random random, int width, int height) {
        updateBounds(width, height);
        active = Utils.withinBounds(index, 0, activeLevels.length - 1) && activeLevels[index];
        if (!active) return;

        int spawnX = random.nextBoolean() ? 16 : width - size - 16;
        int spawnY = random.nextBoolean() ? 16 : height - size - 16;
        setPosition(spawnX, spawnY);

        if (attackBehavior != null) attackBehavior.reset(this);

        frameIndex = frameTimer = 0;
        currentAnim = "idle";
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå
    public void update(Player player, Level level) {
        if (!active || player == null || attackBehavior == null) return;

        int oldX = x, oldY = y;

        attackBehavior.attack(this, player, level);

        // üß≠ ‡∏à‡∏≥‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô dx ‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
        if (dx < 0) facingLeft = true;
        else if (dx > 0) facingLeft = false;

        updateBase();
        attackBehavior.afterUpdate(this);

        moving = (x != oldX || y != oldY);
        updateAnimation();
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏∏‡∏Å 8 ticks)
    private void updateAnimation() {
        if (animationLocked) return; // üîí ‡∏ñ‡∏π‡∏Å behavior ‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏ß‡πâ ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏à‡∏ô‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å

        BufferedImage[] frames = animator.get(currentAnim);
        if (frames.length == 0) return;

        if (++frameTimer >= 8) {
            frameTimer = 0;
            frameIndex = (frameIndex + 1) % frames.length;
        }
    }

    // ‡∏ß‡∏≤‡∏î‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    public void draw(Graphics2D g) {
        if (!active) return;

        BufferedImage[] frames = animator.get(currentAnim);
        if (frames.length == 0) {
            drawBase(g);
            return;
        }

        int index = Math.min(frameIndex, frames.length - 1);
        int drawW = (int) (size * 6);
        int drawH = (int) (size * 6);
        int offsetX = x - (drawW - size) / 2;
        int offsetY = y - (drawH - size) / 2;

        // üîπ ‡πÉ‡∏ä‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÑ‡∏ß‡πâ‡∏à‡∏≤‡∏Å update()
        boolean faceLeft = facingLeft;

        // üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å transform ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
        java.awt.geom.AffineTransform old = g.getTransform();

        if (faceLeft) {
            g.translate(offsetX + drawW, offsetY);
            g.scale(-1, 1);
            g.drawImage(frames[index], 0, 0, drawW, drawH, null);
        } else {
            g.drawImage(frames[index], offsetX, offsetY, drawW, drawH, null);
        }

        g.setTransform(old); // ‡∏Ñ‡∏∑‡∏ô transform ‡πÄ‡∏î‡∏¥‡∏°
        attackBehavior.render(g, this); // ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    }

    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô
    public void setAnimation(String name) {
        this.currentAnim = name;
        this.frameIndex = this.frameTimer = 0;
    }

    // ===== üéû ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏ü‡∏£‡∏°‡πÅ‡∏ö‡∏ö‡πÅ‡∏°‡∏ô‡∏ô‡∏ß‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏© =====
    public void lockAnimation() {
        if (!animationLocked) {
            animationLocked = true;
            frameTimer = 0;
        }
    }

    public void unlockAnimation() {
        if (animationLocked) {
            animationLocked = false;
            frameTimer = 0;
        }
    }

    public void setAnimationFrame(int index) {
        BufferedImage[] frames = animator.get(currentAnim);
        if (frames.length == 0) return;
        frameIndex = Utils.clamp(index, 0, frames.length - 1);
    }


    public boolean isActive() { return active; }
    public AttackType getAttackType() { return type; }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    public static void updateAll(List<Monster> monsters, Player player, Level level) {
        for (Monster monster : monsters) {
            monster.update(player, level);
        }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏î‡πà‡∏≤‡∏ô
    public static List<Monster> createDefaultMonsters() {
        List<Monster> list = new ArrayList<>();

        Monster stun = new Monster(AttackType.STUN);
        stun.setActiveLevels(1, 4);

        Monster wrap = new Monster(AttackType.WRAP);
        wrap.setActiveLevels(0, 3);

        Monster shoot = new Monster(AttackType.SHOOT);
        shoot.setActiveLevels(2, 5);

        list.add(stun);
        list.add(wrap);
        list.add(shoot);
        return list;
    }
}
