package entity;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.util.WeakHashMap;
import system.Config;
import system.Utils;

/**
 * StunAttack ‚Äî ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "‡∏ä‡πá‡∏≠‡∏ï/‡∏™‡∏ï‡∏±‡∏ô"
 * ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡∏ß‡∏á‡πÅ‡∏´‡∏ß‡∏ô‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏ï‡∏±‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
 */
class StunAttack implements Monster.AttackBehavior {
    private static final int CAST_DELAY = 6; // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á skill1
    private static final int SKILL_FRAMES = Math.max(1,
            Monster.gMonsterAnimator().get("skill1").length);

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞ stun
    private static class Data {
        int stunTick;          // ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏•‡∏∑‡πà‡∏ô stun ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        int cooldown;          // ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Ñ‡∏•‡∏∑‡πà‡∏ô
        boolean casting;       // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô skill1 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        int castFrameIndex;    // ‡πÄ‡∏ü‡∏£‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á skill1
        int castFrameTimer;    // ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏Ç‡∏≠‡∏á skill1
        boolean castFinished;  // ‡πÄ‡∏•‡πà‡∏ô skill1 ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        String currentAnim = ""; // ‡∏à‡∏î‡∏à‡∏≥‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡πÄ‡∏•‡πà‡∏ô
    }

    private final WeakHashMap<Monster, Data> states = new WeakHashMap<>();

    @Override
    public void reset(Monster self) {
        Data data = get(self);
        data.stunTick = 0;
        data.cooldown = Config.STUN_COOLDOWN;
        data.casting = false;
        data.castFrameIndex = 0;
        data.castFrameTimer = 0;
        data.castFinished = false;
        data.currentAnim = "";
        switchAnimation(self, data, "idle");
    }

    @Override
    public void attack(Monster self, Player player, system.Level level) {
        Data data = get(self);

        if (data.stunTick > 0) {
            // üîπ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏á stun ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏ü‡∏£‡∏°
            data.stunTick--;
            applyStun(self, player, data);
            return;
        }

        if (data.casting) {
            // üî∏ ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡πà‡∏≤‡∏¢ skill1 ‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏ô‡∏ô‡∏¥‡πà‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
            self.setVelocity(0, 0);
            switchAnimation(self, data, "skill1");
            if (advanceCasting(data)) {
                data.casting = false;
                data.stunTick = Config.STUN_DURATION;
                data.cooldown = Config.STUN_COOLDOWN;
                switchAnimation(self, data, "idle");
            }
            return;
        }

        if (data.cooldown > 0) {
            // üîπ ‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏£‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
            data.cooldown--;
            if (data.cooldown <= 0) {
                startCasting(self, data);
                return;
            }
        }

        // üîπ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‚Üí ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô idle
        switchAnimation(self, data, "idle");
        self.follow(player.getX(), player.getY(), self.getSpeed());
    }

    @Override
    public void render(Graphics2D g, Monster self) {
        Data data = states.get(self);
        if (data == null || data.stunTick <= 0) return;

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ß‡∏á‡πÅ‡∏´‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ
        float progress = 1f - (data.stunTick / (float) Config.STUN_DURATION);
        int min = self.getSize() / 2 + 6;
        int radius = (int) (min + (Config.STUN_RING_RADIUS - min) * progress);

        // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÅ‡∏™‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏á‡πÅ‡∏´‡∏ß‡∏ô‡∏à‡∏∞‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏ö
        float alpha = Utils.clamp(0.6f * (1f - progress), 0f, 0.6f);

        // ‡∏ß‡∏≤‡∏î‡∏ß‡∏á‡πÅ‡∏´‡∏ß‡∏ô‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≠‡∏ö‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå
        g.setColor(new Color(100, 200, 255));
        var oldStroke = g.getStroke();
        var oldComposite = g.getComposite();
        system.EffectRenderer.setAlpha(g, alpha);
        g.setStroke(new BasicStroke(8));

        int cx = self.getCenterX();
        int cy = self.getCenterY();
        int d = radius * 2;
        g.drawOval(cx - radius, cy - radius, d, d);

        g.setStroke(oldStroke);
        g.setComposite(oldComposite);
    }

    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏∑‡πà‡∏ô stun ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
     * ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡∏ß‡∏á‡πÅ‡∏´‡∏ß‡∏ô ‚Üí ‡πÉ‡∏´‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ï‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
     */
    private void applyStun(Monster self, Player player, Data data) {
        if (player == null || player.isStunned()) return;

        float progress = 1f - (data.stunTick / (float) Config.STUN_DURATION);
        int min = self.getSize() / 2 + 6;
        int radius = (int) (min + (Config.STUN_RING_RADIUS - min) * progress);
        int inner = Math.max(0, radius - Config.STUN_RING_THICKNESS);
        int outer = radius + Config.STUN_RING_THICKNESS;

        int px = player.getCenterX();
        int py = player.getCenterY();
        int dist2 = Utils.distanceSquared(px, py, self.getCenterX(), self.getCenterY());

        // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏ö‡πÉ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏ö‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏ß‡∏á‡πÅ‡∏´‡∏ß‡∏ô ‚Üí ‡πÇ‡∏î‡∏ô‡∏™‡∏ï‡∏±‡∏ô
        if (dist2 >= inner * inner && dist2 <= outer * outer) {
            player.applyStun(Config.STUN_DURATION);
        }
    }

    // ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    private Data get(Monster self) {
        return states.computeIfAbsent(self, s -> new Data());
    }
    private void startCasting(Monster self, Data data) {
        data.casting = true;
        data.castFrameIndex = 0;
        data.castFrameTimer = 0;
        data.castFinished = false;
        switchAnimation(self, data, "skill1");
    }

    private boolean advanceCasting(Data data) {
        if (data.castFinished) return true;

        if (++data.castFrameTimer >= CAST_DELAY) {
            data.castFrameTimer = 0;
            data.castFrameIndex++;
            if (data.castFrameIndex >= SKILL_FRAMES) {
                data.castFrameIndex = SKILL_FRAMES - 1;
                data.castFinished = true;
            }
        }
        return data.castFinished;
    }

    private void switchAnimation(Monster self, Data data, String animation) {
        if (!animation.equals(data.currentAnim)) {
            self.setAnimation(animation);
            data.currentAnim = animation;
        }
    }
}
