package entity;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.util.WeakHashMap;
import system.EffectRenderer;
import system.Level;
import system.Utils;

/**
 * WrapAttack ‚Äî ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏° "‡∏ß‡∏≤‡∏£‡πå‡∏õ" ‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏ô Six Door Maze
 * ‡πÉ‡∏ä‡πâ death.png (20 ‡πÄ‡∏ü‡∏£‡∏°) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏£‡πå‡∏õ ‚Üí ‡∏¢‡πâ‡∏≠‡∏ô‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡πÑ‡∏•‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠
 */
public class WrapAttack implements Monster.AttackBehavior {

    // ===== üß© ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà =====
    private static final long WARP_COOLDOWN_MS = 5000L;     // ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏≤‡∏£‡πå‡∏õ‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
    private static final int FRAME_DELAY = 3;                // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Monster
    private static final int WARP_RANGE = 320;               // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏≤‡∏£‡πå‡∏õ
    private static final int SAFE_OFFSET = 12;               // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏≠‡∏ô‡πÇ‡∏ú‡∏•‡πà
    private static final int WARP_FRAMES =
            Math.max(1, Monster.gMonsterAnimator().get("death").length); // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ü‡∏£‡∏° death.png ‡πÄ‡∏ï‡πá‡∏° 20 ‡πÄ‡∏ü‡∏£‡∏°

    // ===== üß≠ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏£‡πå‡∏õ =====
    private enum State { IDLE, WARP_CHARGE, WARP_RECOVER }

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß (‡πÉ‡∏ä‡πâ WeakHashMap ‡πÄ‡∏û‡∏∑‡πà‡∏≠ auto clear)
    private static class Data {
        State state = State.IDLE;
        boolean animationFinished, hasTarget;
        long lastWarpTime = System.currentTimeMillis();
        String currentAnim = "";
        int frameIndex, frameTimer;
        int targetX, targetY, targetCenterX, targetCenterY;
    }

    private final WeakHashMap<Monster, Data> states = new WeakHashMap<>();

    // ===== üéØ Logic ‡∏´‡∏•‡∏±‡∏Å =====
    @Override
    public void attack(Monster self, Player player, Level level) {
        Data data = state(self);
        if (player == null) {
            idle(self, data);
            return;
        }

        switch (data.state) {
            case IDLE -> handleIdle(self, player, data);
            case WARP_CHARGE -> handleWarpCharge(self, player, data);
            case WARP_RECOVER -> handleWarpRecover(self, data);
        }
    }

    @Override
    public void afterUpdate(Monster self) {
        // üîπ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏≤‡∏£‡πå‡∏õ
        self.clamp();
    }

    // ===== üé® ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏ß‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏≤‡∏£‡πå‡∏õ =====
    @Override
    public void render(Graphics2D g, Monster self) {
        Data data = states.get(self);
        if (data == null || !data.hasTarget || data.state != State.WARP_CHARGE) return;

        float frameProgress = (data.frameIndex + data.frameTimer / (float) FRAME_DELAY) /
                Math.max(1f, WARP_FRAMES);
        frameProgress = Utils.clamp(frameProgress, 0f, 1f);

        int baseRadius = Math.max(self.getSize(), self.getSize() + SAFE_OFFSET * 2);
        int radius = (int) (baseRadius * (0.6f + 0.4f * frameProgress));

        var oldStroke = g.getStroke();
        var oldComposite = g.getComposite();

        EffectRenderer.setAlpha(g, 0.65f);
        g.setColor(new Color(120, 255, 200));
        g.setStroke(new BasicStroke(6f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));

        int diameter = radius * 2;
        g.drawOval(data.targetCenterX - radius, data.targetCenterY - radius, diameter, diameter);

        g.setStroke(oldStroke);
        g.setComposite(oldComposite);
    }

    @Override
    public void reset(Monster self) {
        Data data = state(self);
        data.state = State.IDLE;
        int frameIndex, frameTimer;
        data.animationFinished = false;
        data.lastWarpTime = System.currentTimeMillis();
        data.hasTarget = false;
        self.unlockAnimation();
        switchAnimation(self, data, "idle");
    }

    // ===== üí§ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Idle =====
    private void handleIdle(Monster self, Player player, Data data) {
        self.unlockAnimation();
        switchAnimation(self, data, "idle");
        self.follow(player.getX(), player.getY()); // ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥

        long now = System.currentTimeMillis();
        if (now - data.lastWarpTime < WARP_COOLDOWN_MS) return; // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå

        int dx = player.getCenterX() - self.getCenterX();
        int dy = player.getCenterY() - self.getCenterY();
        if (dx * dx + dy * dy > WARP_RANGE * WARP_RANGE) return; // ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏Å‡∏•‡πÄ‡∏Å‡∏¥‡∏ô

        // üîπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ß‡∏≤‡∏£‡πå‡∏õ
        enterState(self, data, State.WARP_CHARGE, "death");
        if (player != null) {
            lockWarpTarget(self, player, data);
        }
    }

    // ===== üåÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏≤‡∏£‡πå‡∏õ (death.png ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤) =====
    private void handleWarpCharge(Monster self, Player player, Data data) {
        self.setVelocity(0, 0); // üî∏ ‡∏•‡πá‡∏≠‡∏Å‡∏°‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ô‡∏¥‡πà‡∏á

        if (!data.hasTarget && player != null) {
            lockWarpTarget(self, player, data);
        }

        // üîπ ‡πÄ‡∏•‡πà‡∏ô death.png ‡∏Ñ‡∏£‡∏ö 20 ‡πÄ‡∏ü‡∏£‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏ß‡∏≤‡∏£‡πå‡∏õ
        if (advanceAnimation(self, data, WARP_FRAMES)) {
            teleportBehind(self, player, data);
            data.hasTarget = false;
            
            // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô death_reverse ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö 20 ‡πÄ‡∏ü‡∏£‡∏°
            enterState(self, data, State.WARP_RECOVER, "death_reverse");
        }
    }

    // ===== üîÅ ‡πÄ‡∏•‡πà‡∏ô death.png ‡πÅ‡∏ö‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö =====
    private void handleWarpRecover(Monster self, Data data) {
        self.setVelocity(0, 0);
        int reverseFrames = Math.max(1, Monster.gMonsterAnimator().get("death_reverse").length);
        if (advanceAnimation(self, data, reverseFrames)) {
            data.lastWarpTime = System.currentTimeMillis();
            enterState(self, data, State.IDLE, "idle");
        }
    }

    // ===== üß† ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ =====
    private void idle(Monster self, Data data) {
        self.unlockAnimation();
        switchAnimation(self, data, "idle");
        data.state = State.IDLE;
    }

    private Data state(Monster self) {
        return states.computeIfAbsent(self, s -> new Data());
    }

    private void enterState(Monster self, Data data, State next, String anim) {
        data.state = next;
        resetAnim(data);
        switchAnimation(self, data, anim);
        if (next == State.IDLE) {
            self.unlockAnimation();
        } else {
            self.lockAnimation();
            self.setAnimationFrame(data.frameIndex);
        }
    }

    private void resetAnim(Data data) {
        data.frameIndex = 0;
        data.frameTimer = 0;
        data.animationFinished = false;
        data.hasTarget = false;
    }

    private void switchAnimation(Monster self, Data data, String anim) {
        if (!anim.equals(data.currentAnim)) {
            self.setAnimation(anim);
            data.currentAnim = anim;
        }
    }

    private boolean advanceAnimation(Monster self, Data data, int totalFrames) {
        if (data.animationFinished || totalFrames <= 0) {
            return true;
        }

        if (++data.frameTimer >= FRAME_DELAY) {
            data.frameTimer = 0;

            data.frameIndex++;
            if (data.frameIndex >= totalFrames) {
                data.frameIndex = totalFrames - 1;
                data.animationFinished = true;
            }
            self.setAnimationFrame(data.frameIndex);
        }

        return data.animationFinished;
    }

    // ===== üìç ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡∏≤‡∏£‡πå‡∏õ =====
    private void lockWarpTarget(Monster self, Player player, Data data) {
        int dx = player.getCenterX() - self.getCenterX();
        int dy = player.getCenterY() - self.getCenterY();
        double len = Math.hypot(dx, dy);
        double vx = dx, vy = dy;
        if (len < 1e-3) { vx = 1; vy = 0; len = 1; }

        double nx = vx / len, ny = vy / len;
        int dist = player.getSize() + self.getSize() + SAFE_OFFSET;

        int newX = Utils.clamp(player.getCenterX() - (int) (nx * dist) - self.getSize() / 2, 0, self.panelWidth - self.getSize());
        int newY = Utils.clamp(player.getCenterY() - (int) (ny * dist) - self.getSize() / 2, 0, self.panelHeight - self.getSize());

        data.targetX = newX;
        data.targetY = newY;
        data.targetCenterX = newX + self.getSize() / 2;
        data.targetCenterY = newY + self.getSize() / 2;
        data.hasTarget = true;
    }

    private void teleportBehind(Monster self, Player player, Data data) {
        if (!data.hasTarget && player != null) {
            lockWarpTarget(self, player, data);
        }
        self.setPosition(data.targetX, data.targetY);
    }
}
