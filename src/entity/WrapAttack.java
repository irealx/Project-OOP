package entity;

import java.awt.Graphics2D;
import java.util.WeakHashMap;
import system.Level;

/**
 * WrapAttack ‚Äî ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏° "‡∏ß‡∏≤‡∏£‡πå‡∏õ" ‡∏Ç‡∏≠‡∏á‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏ô Six Door Maze (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
 * ‡∏Ñ‡∏≠‡∏¢‡∏à‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏£‡πå‡∏õ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏ú‡∏•‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô death.png
 */
public class WrapAttack implements Monster.AttackBehavior {

    // ===== ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å =====
    private static final long WARP_COOLDOWN_MS = 5000L;          // 5 ‡∏ß‡∏¥‡∏û‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏≤‡∏£‡πå‡∏õ‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
    private static final int FRAME_DELAY = 8;                     // ‡πÉ‡∏´‡πâ‡πÄ‡∏ü‡∏£‡∏°‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Monster
    private static final int WARP_RANGE = 320;                    // ‡∏£‡∏∞‡∏¢‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏≤‡∏£‡πå‡∏õ
    private static final int SAFE_OFFSET = 12;                    // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏≠‡∏ô‡πÇ‡∏ú‡∏•‡πà
    private static final int WARP_FRAMES = Math.max(1,
            Monster.gMonsterAnimator().get("death").length);     // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ü‡∏£‡∏° death.png

    // ===== ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏£‡πå‡∏õ =====
    private enum State { IDLE, WARP_START, WARP_END }

    private static class Data {
        State state = State.IDLE;
        int frameIndex;
        int frameTimer;
        boolean animationFinished;
        long lastWarpTime = System.currentTimeMillis();
        double dirX;
        double dirY;
        String currentAnim = "";
    }

    private final WeakHashMap<Monster, Data> states = new WeakHashMap<>();

    @Override
    public void attack(Monster self, Player player, Level level) {
        Data data = state(self);
        if (player == null) {
            // üîπ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏¥‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏≠
            switchAnimation(self, data, "idle");
            data.state = State.IDLE;
            return;
        }

        switch (data.state) {
            case IDLE -> handleIdle(self, player, data);
            case WARP_START -> handleWarpStart(self, player, data);
            case WARP_END -> handleWarpEnd(self, data);
        }
    }

    @Override
    public void afterUpdate(Monster self) {
        // üîπ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏à‡∏≠
        self.clamp();
    }

    @Override
    public void render(Graphics2D g, Monster self) {
        // üîπ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏≤‡∏î‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏ä‡πâ death.png ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    }

    @Override
    public void reset(Monster self) {
        Data data = state(self);
        data.state = State.IDLE;
        data.frameIndex = data.frameTimer = 0;
        data.animationFinished = false;
        data.lastWarpTime = System.currentTimeMillis();
        switchAnimation(self, data, "idle");
    }

    // ===== ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ IDLE =====
    private void handleIdle(Monster self, Player player, Data data) {
        switchAnimation(self, data, "idle");

        // üîπ ‡πÉ‡∏´‡πâ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
        self.follow(player.getX(), player.getY());

        // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞ ‡∏ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏≤‡∏£‡πå‡∏õ
        long now = System.currentTimeMillis();
        if (now - data.lastWarpTime < WARP_COOLDOWN_MS) return;

        int dx = player.getCenterX() - self.getCenterX();
        int dy = player.getCenterY() - self.getCenterY();
        if (dx * dx + dy * dy > WARP_RANGE * WARP_RANGE) return;

        data.dirX = dx;
        data.dirY = dy;
        enterState(self, data, State.WARP_START, "death");
    }

    // ===== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô death.png ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤ =====
    private void handleWarpStart(Monster self, Player player, Data data) {
        self.setVelocity(0, 0); // üî∏ ‡∏•‡πá‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏≤‡∏£‡πå‡∏õ

        if (advanceAnimation(data, WARP_FRAMES)) {
            // üîπ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏à‡∏ö ‚Üí ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
            teleportBehind(self, player, data);
            enterState(self, data, State.WARP_END, "death_reverse");
        }
    }

    // ===== ‡πÄ‡∏•‡πà‡∏ô death.png ‡πÅ‡∏ö‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö =====
    private void handleWarpEnd(Monster self, Data data) {
        self.setVelocity(0, 0);

        if (advanceAnimation(data, WARP_FRAMES)) {
            data.lastWarpTime = System.currentTimeMillis();
            enterState(self, data, State.IDLE, "idle");
        }
    }

    // ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ =====
    private Data state(Monster self) {
        return states.computeIfAbsent(self, s -> new Data());
    }

    private void enterState(Monster self, Data data, State next, String animation) {
        data.state = next;
        data.frameIndex = 0;
        data.frameTimer = 0;
        data.animationFinished = false;
        switchAnimation(self, data, animation);
    }

    private void switchAnimation(Monster self, Data data, String animation) {
        if (!animation.equals(data.currentAnim)) {
            self.setAnimation(animation);
            data.currentAnim = animation;
        }
    }

    private boolean advanceAnimation(Data data, int totalFrames) {
        if (data.animationFinished) return true;

        if (++data.frameTimer >= FRAME_DELAY) {
            data.frameTimer = 0;
            data.frameIndex++;
            if (data.frameIndex >= totalFrames) {
                data.frameIndex = totalFrames - 1;
                data.animationFinished = true;
            }
        }
        return data.animationFinished;
    }

    private void teleportBehind(Monster self, Player player, Data data) {
        double vx = data.dirX;
        double vy = data.dirY;
        double length = Math.hypot(vx, vy);

        if (length < 1e-3) {
            // üî∏ ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏°‡∏ó‡∏¥‡∏®‡∏´‡∏ô‡∏µ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            vx = 1;
            vy = 0;
            length = 1;
        }

        double nx = vx / length;
        double ny = vy / length;

        int distance = player.getSize() + self.getSize() + SAFE_OFFSET;
        int centerX = player.getCenterX() - (int) Math.round(nx * distance);
        int centerY = player.getCenterY() - (int) Math.round(ny * distance);

        int newX = centerX - self.getSize() / 2;
        int newY = centerY - self.getSize() / 2;
        self.setPosition(newX, newY);
    }
}
